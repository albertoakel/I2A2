# ============================================================
# üê¢ Sistema de Monitoramento de Ninhos - v0.01
# ============================================================

# ============================================================
#                 BASE DE DADOS INICIAL
# ============================================================

ninhos = [
    ['Praia Norte', 102, 'intacto', 'üü¢ estavel', 12, False],
    ['Praia Central', 89, 'danificado', 'üî¥ critico', 3, True],
    ['Praia Sul', 120, 'amea√ßado', 'üü† sob observa√ßao', 7, False],
    ['Praia Central', 75, 'intacto', 'üü¢ estavel', 2, False],
    ['Praia Norte', 60, 'danificado', 'üî¥ critico', 5, True],
    ['Praia Norte', 144, 'amea√ßado', 'üî¥ critico', 12, True],
    ['Praia Central', 178, 'danificado', 'üü† sob observa√ßao', 38, False],
    ['Praia Sul', 79, 'intacto', 'üî¥ critico', 49, True],
    ['Praia Norte', 141, 'danificado', 'üü† sob observa√ßao', 40, True],
    ['Praia Central', 107, 'danificado', 'üü† sob observa√ßao', 13, True],
    ['Praia Central', 129, 'intacto', 'üî¥ critico', 46, True],
    ['Praia Sul', 123, 'amea√ßado', 'üü¢ estavel', 10, True],
    ['Praia Norte', 74, 'danificado', 'üî¥ critico', 38, True],
    ['Praia Central', 145, 'danificado', 'üü† sob observa√ßao', 17, False],
    ['Praia Norte', 117, 'amea√ßado', 'üü¢ estavel', 49, True],
    ['Praia Sul', 108, 'amea√ßado', 'üü¢ estavel', 44, True],
    ['Praia Central', 137, 'intacto', 'üü† sob observa√ßao', 32, True],
    ['Praia Norte', 102, 'danificado', 'üü† sob observa√ßao', 28, False],
    ['Praia Norte', 66, 'amea√ßado', 'üî¥ critico', 35, True],
    ['Praia Central', 23, 'amea√ßado', 'üü† sob observa√ßao', 24, False],
    ['Praia Norte', 86, 'intacto', 'üü† sob observa√ßao', 4, True],
    ['Praia Norte', 79, 'amea√ßado', 'üî¥ critico', 18, True],
    ['Praia Norte', 94, 'intacto', 'üü† sob observa√ßao', 22, False],
    ['Praia Norte', 96, 'danificado', 'üî¥ critico', 4, True],
    ['Praia Central', 49, 'amea√ßado', 'üü¢ estavel', 1, False],
    ['Praia Norte', 139, 'intacto', 'üü¢ estavel', 29, True],
    ['Praia Sul', 108, 'amea√ßado', 'üü† sob observa√ßao', 46, False],
    ['Praia Central', 108, 'danificado', 'üî¥ critico', 28, True]]

# ============================================================
#           CONVERS√ÉO PARA LISTA DE DICION√ÅRIOS
# ============================================================
# Defini√ß√£o dos nomes das colunas para convers√£o para dicion√°rio
nomes_colunas = ["regiao", "quantidade_ovos", "status", "risco", "dias_para_eclosao", "predadores"]

# Convertar a a lista para uma lista de dicionarios( ninhos--> ninhos_dados)
ninhos_dados = []
for ninho_list in ninhos:
    ninhos_dados.append(dict(zip(nomes_colunas, ninho_list)))

# ============================================================
#           CONSTANTES PARA VALIDA√á√ÉO DE ENTRADA
# ============================================================

REGIOES_MAP = {
    "1": "Praia Norte",
    "2": "Praia Central",
    "3": "Praia Sul"}
STATUS_MAP = {
    "1": "intacto",
    "2": "amea√ßado",
    "3": "danificado"}
RISCO_MAP = {
    "1": "üü¢ estavel",
    "2": "üü† sob observa√ßao",
    "3": "üî¥ critico"}

# Tamb√©m mantemos as listas originais para uso em outras fun√ß√µes, se necess√°rio
REGIOES_VALIDAS = list(REGIOES_MAP.values())
STATUS_VALIDOS = list(STATUS_MAP.values())
RISCO_VALIDOS = list(RISCO_MAP.values())


# ============================================================
#                 FUN√á√ïES DE ESTAT√çSTICA
# ============================================================

def total_ninhos(data, risco=None):
    """
    Retorna o n√∫mero total de ninhos registrados.

    Args:
        data (list)   :  Lista de dicion√°rios contendo os dados dos ninhos.
        risco (str)   :  Filtro, por nivel de risco(estavel,sob observa√ßao,critico) do ninho.

    returns:
        int ou str    : N√∫mero total de ninhos (ou mensagem de erro, se a base estiver vazia).
    """
    if not data:
        return "Nenhum dado dispon√≠vel para an√°lise de risco."

    if risco is None:
        return len(data)
    risco = risco.lower()
    return sum(1 for ninho in data if ' '.join(ninho['risco'].split()[1:]) == risco)


def media_ovos(data, risco=None):
    """
    Retorna a media de ovos por ninho

    Args:
        data (list)   :  Lista de dicion√°rios contendo os dados dos ninhos.
        risco (str)   :  Filtro, por nivel de risco(estavel,sob observa√ßao,critico) do ninho.

    returns:
        float ou str  :   Media dos ovos(none se n√£o ouver dados)
    """
    if not data:
        return "Nenhum dado dispon√≠vel para an√°lise de risco."

    # filtragem por risco
    if risco is not None:
        risco = risco.lower()
        data = [ninho for ninho in data if ' '.join(ninho['risco'].split()[1:]) == risco]
        if not data:
            return None
    total_ovos = sum(ninho['quantidade_ovos'] for ninho in data)
    return total_ovos / len(data)


def ninhos_eclodir(data, days=None):
    """
    Retorna a contagem de ninhos com dias para eclos√£o igual ou inferior ao especificado.

    Args:
        data (list)   :  Lista de dicion√°rios contendo os dados dos ninhos.
        days(int)     :  N√∫mero m√°ximo de dias para eclos√£o (padr√£o: 5)

    Returns:
        int           :  Quantidade de ninhos que eclodir√£o dentro do per√≠odo especificado
    """
    count = 0
    if days is None:
        for ninho in data:
            if ninho['dias_para_eclosao'] <= 5:
                count += 1
    else:
        for ninho in data:
            if ninho['dias_para_eclosao'] <= days:
                count += 1
    return count


def regiao_risco(data, risco):
    """
    Identifica a(s) regi√µes) com mais ninhos do risco especificado.

    Args:
        data (list)   :  Lista de dicion√°rios contendo os dados dos ninhos.
        risco (str)   :  Filtro, por nivel de risco(estavel,sob observa√ßao,critico) do ninho.

    Returns:
        str           :  Mensagem formatada com o resultado da an√°lise
    """
    # Valida√ß√µes iniciais
    if not data:
        return "Nenhum dado dispon√≠vel para an√°lise de risco."

    if not isinstance(risco, str):
        return "O risco deve ser uma string."

    risco = risco.lower()  # Apenas padroniza min√∫sculas e espa√ßos

    # Contagem por regi√£o
    contagem_regioes = {}
    for ninho in data:
        risco_ninho = ' '.join(ninho['risco'].split()[1:])
        if risco_ninho.lower() == risco:
            regiao = ninho['regiao']
            contagem_regioes[regiao] = contagem_regioes.get(regiao, 0) + 1

    # Verifica se encontrou resultados
    if not contagem_regioes:
        return f"Nenhum ninho classificado como '{risco}' foi encontrado."

    # Encontra o valor m√°ximo
    max_ninhos = max(contagem_regioes.values())
    regioes_top = [regiao for regiao, count in contagem_regioes.items()
                   if count == max_ninhos]

    # Formata a resposta
    if len(regioes_top) == 1:
        return f" {regioes_top[0]} ({max_ninhos} ninhos)"
    else:
        return f" {', '.join(regioes_top)} ({max_ninhos} ninhos cada)"


def ninhos_predadores_status(data, status_input):
    """
    Conta quantos ninhos t√™m presen√ßa de predadores e possuem um determinado status.

    Args:
        data (list): Lista de dicion√°rios contendo os dados dos ninhos.
        status_input (str): Status a ser filtrado (ex: 'intacto', 'danificado').

    Returns:
        int: N√∫mero de ninhos com predadores e com o status especificado.
    """
    count = 0
    for ninho in data:
        if ninho['predadores'] is True and ninho['status'] == status_input:
            count += 1
    return count


# ============================================================
#                 Fun√ß√µes do Menu Interativo
# ============================================================


def exibir_opcoes(opcoes_map):
    """Fun√ß√£o auxiliar para exibir as op√ß√µes do mapa."""
    for chave, nome in opcoes_map.items():
        print(f" {chave}) {nome}")


def inserir_novo_ninho():
    """
    Coleta e valida os dados de entrada para registrar um novo ninho de tartaruga.

    O usu√°rio pode digitar 'voltar' a qualquer momento para cancelar a opera√ß√£o.
    Todos os campos s√£o validados antes de serem aceitos.

    Returns:
        dict: Dicion√°rio com os dados do novo ninho no seguinte formato:
            {
                "regiao": str,
                "quantidade_ovos": int,
                "status": str,
                "risco": str,
                "dias_para_eclosao": int,
                "predadores": bool
            }
        None: Se o usu√°rio cancelar a opera√ß√£o.
    """

    print("\n--- Inserir Novo Ninho ---")
    print("Digite 'voltar' a qualquer momento para retornar ao menu principal.")

    regiao = ""
    while True:
        print("\nEscolha a regi√£o:")
        exibir_opcoes(REGIOES_MAP)
        regiao_input = input("Digite a numera√ß√£o correspondente √† regi√£o: ").lower().strip()
        if regiao_input == 'voltar': return None
        if regiao_input in REGIOES_MAP:
            regiao = REGIOES_MAP[regiao_input]
            break
        print("Op√ß√£o de regi√£o inv√°lida. Tente novamente.")

    quantidade_ovos = 0
    while True:
        try:
            quantidade_ovos_str = input("Quantidade de ovos: ").strip()
            if quantidade_ovos_str.lower() == 'voltar': return None
            quantidade_ovos = int(quantidade_ovos_str)
            if quantidade_ovos <= 0:
                print("Quantidade de ovos deve ser um n√∫mero positivo.")
                continue
            break
        except ValueError:
            print("Entrada inv√°lida. Por favor, digite um n√∫mero inteiro.")

    status = ""
    while True:
        print("\nEscolha o status:")
        exibir_opcoes(STATUS_MAP)
        status_input = input("Digite a numera√ß√£o correspondente ao status: ").lower().strip()
        if status_input == 'voltar': return None
        if status_input in STATUS_MAP:
            status = STATUS_MAP[status_input]
            break
        print("Op√ß√£o de status inv√°lida. Tente novamente.")

    risco = ""
    while True:
        print("\nEscolha o n√≠vel de risco:")
        exibir_opcoes(RISCO_MAP)
        risco_input = input("Digite a numera√ß√£o correspondente ao risco: ").lower().strip()
        if risco_input == 'voltar': return None
        if risco_input in RISCO_MAP:
            risco = RISCO_MAP[risco_input]
            break
        print("Op√ß√£o de risco inv√°lida. Tente novamente.")

    dias_para_eclosao = 0
    while True:
        try:
            dias_para_eclosao_str = input("Dias para eclos√£o: ").strip()
            if dias_para_eclosao_str.lower() == 'voltar': return None
            dias_para_eclosao = int(dias_para_eclosao_str)
            if dias_para_eclosao <= 0:
                print("Dias para eclos√£o deve ser um n√∫mero positivo.")
                continue
            break
        except ValueError:
            print("Entrada inv√°lida. Por favor, digite um n√∫mero inteiro.")

    predadores = False
    while True:
        predadores_input = input("O ninho apresenta predadores? (Digite 's ou 1' para sim ou 'n ou 0' para n√£o): ").strip().lower()
        if predadores_input == 'voltar': return None
        if predadores_input in ['sim', 's','1']:
            predadores = True
            break
        elif predadores_input in ['nao', 'n','0']:
            predadores = False
            break
        print("Entrada inv√°lida. Por favor, digite para 'sim' ou 'nao'.")

    return {
        "regiao": regiao,
        "quantidade_ovos": quantidade_ovos,
        "status": status,
        "risco": risco,
        "dias_para_eclosao": dias_para_eclosao,
        "predadores": predadores}


def visualizar_relatorio(data):
    """Exibe todos os registros de ninhos em um formato tabular."""
    if not data:
        print("Nenhum registro para exibir.")
        return

    print("\n")
    print(" " * 32 + "RELATORIO DE REGISTROS")
    print("=" * 98)
    print(
        f"{'#' :<4} | {'Regi√£o':<15} | {'Ovos':<5} | {'Status':<12} | {'Risco':<20} | {'Dias p/ Ecl.':<15} | {'Predador?':<8} #")
    print("-" * 98)
    for i, ninho in enumerate(data):
        predador_str = "Sim" if ninho['predadores'] else "N√£o"
        print(
            f"{i + 1:<4} | {ninho['regiao']:<15} | {ninho['quantidade_ovos']:<5} | "
            f"{ninho['status']:<12} | {ninho['risco']:<20} | {ninho['dias_para_eclosao']:<15} | {predador_str:<11}"
        )
    print("=" * 98)


def consultar_estatisticas(data):
    """Exibe todas as estat√≠sticas calculadas."""
    print("\n")
    print("-" * 70)
    print(" " * 3 + "ESTATISTICAS")
    print("-" * 70)
    print(" " * 2 + f"{' Total DE NINHOS:':<40}{total_ninhos(data):>10.0f}")
    print(" " * 2 + f"{' M√©dia de ovos por Ninho com risco üü¢ :':<40}{media_ovos(data, 'estavel'):>10.2f}")
    print(" " * 2 + f"{' NINHOS PRESTES A ECLODIR (dias <= 5):':<40}{ninhos_eclodir(data):>10.0f}")
    print(" " * 2 + f"{' Regi√£o com mais ninhos sob RISCO üî¥ :':<40}{regiao_risco(data, 'critico')}")
    print(
        " " * 2 + f"{' Presen√ßa de predadores e danificados:':<39} {ninhos_predadores_status(data, 'danificado'):>10.0f}")
    print("-" * 70)

    M = input('Para mais estatisticas, digite 1 : ')
    if M == '1':
        print(" " * 2 + f"{' Total DE NINHOS üü¢ :':<40}{total_ninhos(data, 'estavel'):>10.0f}")
        print(" " * 2 + f"{' Total DE NINHOS üü† :':<40}{total_ninhos(data, 'sob observa√ßao'):>10.0f}")
        print(" " * 2 + f"{' Total DE NINHOS üî¥ :':<40}{total_ninhos(data, 'critico'):>10.0f}")
        print("_______")
        print(" " * 2 + f"{' M√©dia de ovos por Ninho com risco üü¢ :':<40}{media_ovos(data, 'estavel'):>10.2f}")
        print(" " * 2 + f"{' M√©dia de ovos por Ninho com risco üü† :':<40}{media_ovos(data, 'sob observa√ßao'):>10.2f}")
        print(" " * 2 + f"{' M√©dia de ovos por Ninho com risco üî¥ :':<40}{media_ovos(data, 'critico'):>10.2f}")
        print("_______")
        print(" " * 2 + f"{' Regi√£o com mais ninhos sob RISCO üü¢ :':<40}{regiao_risco(data, 'Estavel')}")
        print(" " * 2 + f"{' Regi√£o com mais ninhos sob RISCO üü† :':<40}{regiao_risco(data, 'sob observa√ßao')}")
        print(" " * 2 + f"{' Regi√£o com mais ninhos sob RISCO üî¥ :':<40}{regiao_risco(data, 'critico')}")
        print("_______")
        print(
            " " * 2 + f"{' Presen√ßa de predadores e intacto:':<39} {ninhos_predadores_status(data, 'intacto'):>10.0f}")
        print(
            " " * 2 + f"{' Presen√ßa de predadores e amea√ßado:':<39} {ninhos_predadores_status(data, 'amea√ßado'):>10.0f}")
        print(
            " " * 2 + f"{' Presen√ßa de predadores e danificados:':<39} {ninhos_predadores_status(data, 'danificado'):>10.0f}")

        print("-" * 70)


# ============================================================
#                 C√ìDIGO PRINCIPAL (MAIN)
# ============================================================

tentativas_incorretas = 0
LIMITE_TENTATIVAS = 3

while True:
    print("\n")
    print(" " * 8 + "üê¢ SISTEMA DE MONITORAMENTO DE NINHOS ( v 0.01) ")
    print(" " * 8 + "      1- Inserir novos ninhos")
    print(" " * 8 + "      2- Visualizar relat√≥rio completo da semana")
    print(" " * 8 + "      3- Consultar estat√≠sticas")
    print(" " * 8 + "      4- Exportar base de dados")
    print(" " * 8 + "      0- Encerrar o sistema")
    print("\n")
    try:

        inicio = int(input(" " * 12 + "Digite uma op√ß√£o do menu: "))
        # Se a entrada for v√°lida (um n√∫mero), zera o contador de tentativas incorretas
        tentativas_incorretas = 0
    except ValueError:
        tentativas_incorretas += 1
        print(
            f'\nVALOR INCORRETO! Por favor, digite um n√∫mero inteiro. Voc√™ tem {LIMITE_TENTATIVAS - tentativas_incorretas} tentativas restantes.')
        if tentativas_incorretas >= LIMITE_TENTATIVAS:
            print("\nLimite de tentativas incorretas atingido. Fechando o programa.")
            break
        continue

    # Lidar com op√ß√µes v√°lidas numericamente, mas fora do menu
    if inicio not in [0, 1, 2, 3, 4]:
        tentativas_incorretas += 1
        print(
            f'\nOP√á√ÉO INV√ÅLIDA. Por favor, digite um n√∫mero de 0 a 3. Voc√™ tem {LIMITE_TENTATIVAS - tentativas_incorretas} tentativas restantes.')
        if tentativas_incorretas >= LIMITE_TENTATIVAS:
            print("\nLimite de tentativas incorretas atingido. Fechando o programa.")
            break
        continue
    else:
        # Se a entrada √© um n√∫mero e uma op√ß√£o v√°lida, zera o contador
        tentativas_incorretas = 0

    # Op√ß√µes do Menu via Mach case
    match inicio:
        case 1:
            novo_ninho = inserir_novo_ninho()
            if novo_ninho:  # Se o usu√°rio n√£o digitou 'voltar'
                ninhos_dados.append(novo_ninho)
                print("Novo ninho inserido com sucesso!")
            else:
                print("Inser√ß√£o de ninho cancelada.")
        case 2:
            visualizar_relatorio(ninhos_dados)
            input("\nPressione Enter para retornar ao menu principal...")

        case 3:
            consultar_estatisticas(ninhos_dados)
            input("\nPressione Enter para retornar ao menu principal...")

        case 4:
            print('\n Fun√ß√£o em desenvolvimento')
            input("\nPressione Enter para retornar ao menu principal...")

        case 0:
            print("\nEncerrando o sistema. At√© mais!")
            break